@using HackerCentral.Models
@{
    var menus = new[] {
        new { LinkText="Discussion", ActionName="Discussion",ControllerName="Home",Roles=UserRole.Hacker.ToString() + "," + UserRole.Administrator.ToString() + "," + UserRole.User.ToString()},
        new { LinkText="Manage Discussions", ActionName="ManageDiscussion",ControllerName="Administration",Roles=UserRole.Administrator.ToString()  },
        new { LinkText="Manage Users", ActionName="ManageUsers",ControllerName="Administration",Roles=UserRole.Administrator.ToString() },
        new { LinkText="Points", ActionName="Index",ControllerName="Points",Roles=UserRole.Hacker.ToString() + "," + UserRole.Administrator.ToString() + "," + UserRole.User.ToString()},
        //new { LinkText="View Users", ActionName="Index",ControllerName="Users",Roles=UserRole.Administrator.ToString() },
        new { LinkText="Users", ActionName="Index", ControllerName ="Users", Roles=UserRole.User.ToString() + "," + UserRole.Administrator.ToString() + "," + UserRole.Hacker.ToString()},
        //new { LinkText="Generate Token", ActionName="GenerateToken",ControllerName="Token",Roles=UserRole.Administrator.ToString() },
        //new { LinkText="Tracking Data", ActionName="Data",ControllerName="Tracking",Roles=UserRole.Administrator.ToString() },
        //new { LinkText="Administrative Access", ActionName="Login",ControllerName="Account",Roles="Anonymous" }
        //new { LinkText="Sign Up", ActionName="Register",ControllerName="Account",Roles="Anonymous" }
    };
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>@ViewBag.Title - UNL Research</title>
    <link href="~/favicon.ico" rel="shortcut icon" type="image/x-icon" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="">
    <meta name="author" content="">
    <meta name="csrf-token" content="" />
   
    

    @if (Request.IsAuthenticated)
    {
        @Scripts.Render("~/bundles/jquery", "~/bundles/jqueryui")
        @Styles.Render("~/Content/themes/base/css")
        <script>
            var preempt = false;
            $(document).on('click.dropdown.data-api', function (event) {
                //if (preempt) {
                //    preempt = false;
                event.stopImmediatePropagation();
                //}
            });
        </script>
        @Scripts.Render("~/bundles/modernizr", "~/bundles/bootstrap")
        @Scripts.Render("~/bundles/signalr", "~/signalr/hubs", "~/bundles/select2")
        @Styles.Render("~/Content/select2")
        
        
        <script>
            var queryCallback = null;

            function closeTab(groupId) {
                var key = tabKeys[groupId];
                $('#msgTabs #' + key + tabLabelToken).remove();
                $('#msgTabContent #' + key + tabContentToken).remove();
                delete tabKeys[groupId];
                $('#msgTabs #startNewChatTab').find("a[data-toggle='tab']").tab('show');
            }

            function createKey() {
                return "l" + ('xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                    return v.toString(16);
                }));
            }

            var tabContentToken = createKey();
            var tabLabelToken = createKey();

            //var tabContentToken = "50335ad734ab42fe87cb9dd71c940b83";
            //var tabLabelToken = "0ebd4ec0a19d43c39ceb67282e07f12c";

            var tabKeys = {};
            var count = 0;
            var chatTimeStamp = {};

            $(function () {


                //handle: "#dragHandle",
                //$('#chatWindow').draggable({  containment: "#maincontent" });
                //$('.dropdown-menu').click(function (event) {
                //    alert("Hello");
                //    event.stopPropagation();
                //    event.stopImmediatePropagation();
                //    return false;
                //});

                $('#msgNavButton').popover({ animation: true, placement: 'top', trigger: 'manual', title: 'Default Title Length', content: 'The default content length should be a short paragraph like this.' });
                $('#msgNavButton').click(function () {
                    $('#msgNavButton').popover('hide');
                });

                var myName = "@User.Identity.Name";

                // Reference the auto-generated proxy for the hub.  
                var chat = $.connection.chatHub;
                // Create a function that the hub can call back to display messages.                             
                chat.client.addNewMessageToPage = function (name, list, message, timeStamp) {
                    //if ($('#msgRecipients').val()) {
                    //} else {
                    //    //alert("false");
                    //    $('#msgRecipients').val(name);
                    //}

                    var groupId = list.join(", ");
                    //if (!groupId in chatTimeStamp) {
                    //    chatTimeStamp[groupId] = timeStamp;
                    //}
                    if (groupId in tabKeys) {
                        var key = tabKeys[groupId];
                        var element = $('#msgTabContent #' + key + tabContentToken + ' #msgBoard');

                        if (myName == name) {
                            element.append('<p class="triangle-border right" style="word-wrap:break-word;"><strong>' + name + ':</strong><br>' + message + '</p>');
                        } else {
                            element.append('<p class="triangle-border left" style="word-wrap:break-word;"><strong>' + name + ':</strong><br>' + message + '</p>');
                        }

                        //element.append('<div class="alert alert-info" style="word-wrap:break-word; margin-top:-12px;"><strong>' + name + ': </strong><br>' + message + '</div>');
                        //element.append('<p class="triangle-border left" style="word-wrap:break-word; margin-top:-35px;"><strong>' + name + ':</strong><br>' + message + '</p>');
                        element.scrollTop(element[0].scrollHeight);
                        //$('#msgTabs #' + key + tabLabelToken).find("a[data-toggle='tab']").show();
                        $('#msgTabs #' + key + tabLabelToken).find("a[data-toggle='tab']").tab('show');
                    } else {
                        var key = createKey();
                        tabKeys[groupId] = key;
                        count++;
                        chatTimeStamp[groupId] = timeStamp;
                        var userFrd = "";
                        if (groupId.length > 17) {
                            var length = list.length
                            var tokenLength = 14 / length;
                            if (tokenLength < 3) {
                                tokenLength = 3;
                            }
                            for (i = 0; i < length; i++) {
                                userFrd += list[i].substr(0, tokenLength) + ", ";
                            }
                            userFrd = userFrd.substr(0, 17) + "...";
                        } else {
                            userFrd = groupId;
                        }

                        $('#msgTabs').prepend('<li id="' + key + tabLabelToken + '" style="width:175px;">'
                                                + '<a href="#' + key + tabContentToken + '" title="Recipients: ' + groupId + '" " data-toggle="tab" style = "background-color: #FFFFFF">' + '<div style ="color: #363636">' + userFrd
                                                    + '<button class="close pull-right" '
                                                            + 'style="font-size: 11px;float:auto;" '
                                                            + 'onClick="closeTab(&quot;' + groupId + '&quot;)"'
                                                            + '<b>x</b>'
                                                    + '</button>' + '</div>'
                                                + '</a>'
                                            + '</li>');
                        var firstMessage;
                        if (myName == name) {
                            firstMessage = '<p class="triangle-border right" style="word-wrap:break-word;"><strong>' + name + ':</strong><br>' + message + '</p>';
                        } else {
                            firstMessage = '<p class="triangle-border left" style="word-wrap:break-word;"><strong>' + name + ':</strong><br>' + message + '</p>';
                        }
                        $('#msgTabContent').append('<div class="tab-pane" id="' + key + tabContentToken + '">'
                                                + '<div><form id="msgForm">'
                                                    //+ '<p><b>Recipients</b>: ' + groupId + '<\p>'

                                                    + '<div id="msgBoard" style="height: 300px; overflow-y: auto; border-style: dashed; border-width:1px; border-color: #7FAAF6"">'
                                                    //+ '<div class="alert alert-info" style="word-wrap:break-word;">'
                                                    //    + '<strong>' + name + ': </strong><br>' + message
                                                    //+ '</div>'
                                                    + firstMessage
                                                //    + '<p class="triangle-border left" style="word-wrap:break-word;"><strong>' + name + ':</strong><br>' + message + '</p>'
                                                + '</div><br>'
                                                    + '<div class="controls">'
                                                        + '<textarea id="msgText" placeholder="Message" rows="2" style="width: 340px; max-width: 400px; resize: none;"></textarea>'
                                                    + '</div>'
                                                    + '<div class="controls">'
                                                    + '<button type="button" class="btn btn-mini pull-left" id="chatHistory" style="margin-top:-5px">Chat History</button>'
                                                    + '</div>'
                                                    + '<div class="controls">'
                                                        + '<button type="submit" class="btn pull-right" style="margin-right:26px; margin-top:-5px">Send</button>'
                                                    + '</div>'
                                                + '</form></div>'

                                            + '</div>');

                        $('#msgTabContent #' + key + tabContentToken + ' #msgForm').submit(function () {
                            // Call the Send method on the hub.
                            var jsonList = JSON.stringify(list);
                            var text = $('#msgTabContent #' + key + tabContentToken + ' #msgForm #msgText').val();
                            if (text.length > 0)
                                chat.server.send(jsonList, text);
                            // Clear text box and reset focus for next comment. 
                            $('#msgTabContent #' + key + tabContentToken + ' #msgForm #msgText').val('').focus();
                            return false;
                        });

                        $('#msgTabContent #' + key + tabContentToken + ' #msgForm #chatHistory').click(function () {
                            var jsonList = JSON.stringify(list);
                            var groupId = list.join(", ")
                            var time = chatTimeStamp[groupId];

                            chat.server.getOldMessage(jsonList, time);

                            //alert(groupId + " : " + time);
                            return false;
                        });


                    }

                    if (!$('#msgDropDown').hasClass('open')) {
                        var preview = $('#msgNavButton').data('popover');
                        preview.options.title = "Message from " + name + ':';
                        preview.options.content = message;
                        $('#msgNavButton').popover('show');
                    }
                };

                chat.client.addOldMessageToPage = function (name, list, message, timeStamp) {
                    var groupId = list.join(", ");
                    chatTimeStamp[groupId] = timeStamp;
                    var key = tabKeys[groupId];
                    var element = $('#msgTabContent #' + key + tabContentToken + ' #msgBoard');

                    if (myName == name) {
                        element.prepend('<p class="triangle-border right" style="word-wrap:break-word;"><strong>' + name + ':</strong><br>' + message + '</p>');
                    } else {
                        element.prepend('<p class="triangle-border left" style="word-wrap:break-word;"><strong>' + name + ':</strong><br>' + message + '</p>');
                    }
                    //element.scrollTop(element[0].scrollHeight);                
                    $('#msgTabs #' + key + tabLabelToken).find("a[data-toggle='tab']").tab('show');
                }



                chat.client.listUsers = function (userListJson) {
                    userList = JSON.parse(userListJson);
                    data = { results: [] };
                    data.results.push({ id: "Pro Team", text: "Pro Team", isOnline: true });
                    data.results.push({ id: "Con Team", text: "Con Team", isOnline: true });
                    for (var index = 0; index < userList.length; index++) {
                        data.results.push({ id: userList[index].userName, text: userList[index].userName, isOnline: userList[index].isOnline });
                    }
                    data.results.push({ id: "Everyone", text: "Everyone", isOnline: true });
                    data.results.push({ id: "Everyone Online", text: "Everyone Online", isOnline: true });
                    data.results.push({ id: "Everyone Offline", text: "Everyone Offline", isOnline: false });
                    queryCallback(data);
                };

                // is called when a user becomes available to chat
                chat.client.addNewActiveUser = function (name) {
                    //alert("add " + name);
                };

                // is called when a previously available user is no longer available to chat
                chat.client.removeInactiveUser = function (name) {
                    //alert("remove " + name);
                };

                // Get the user name and store it to prepend to messages.
                // Set initial focus to message input box.  
                $('#msgText').focus();

                // Start the connection.
                $.connection.hub.start().done(function () {
                    $('#msgForm').submit(function () {
                        // Call the Send method on the hub.
                        var jsonList = JSON.stringify([].concat($('#msgRecipients').select2("val")));
                        var text = $('#msgText').val();
                        if (text.length > 0)
                            chat.server.send(jsonList, text);
                        // Clear text box and reset focus for next comment. 
                        $('#msgText').val('').focus();
                        return false;
                    });

                    //$('#chatHistory').button(function(){
                    //    var groupId = list.join(", ")
                    //    var time = chatTimeStamp[groupId];
                    //    chat.server.GetOldMessage(jsonList, time);
                    //    return false;s
                    //});

                    $("#msgRecipients").select2({
                        multiple: true,
                        closeOnSelect: false,
                        placeholder: "Recipients",
                        query: function (parameter) {
                            queryCallback = parameter.callback;
                            chat.server.getUserList();
                        },
                        formatResult: function (state) {
                            if (state.isOnline) {
                                return "<span class=\"badge badge-important\">&zwnj;</span>  " + state.text;
                            } else {
                                return "<span class=\"badge\">&zwnj;</span>  " + state.text;
                            }
                        },
                        formatSelection: function (state) {
                            if (state.isOnline) {
                                return "<span>" + state.text + "</span>"
                            } else {
                                return "<span class=\"muted\">" + state.text + "</span>";
                            }
                        },
                        escapeMarkup: function (m) { return m; }
                    });
                });
            });

            $(document).tooltip({ placement: "top" });
        </script>
    }
    else
    {
        @Scripts.Render("~/bundles/jquery", "~/bundles/modernizr", "~/bundles/bootstrap")
         @Scripts.Render("~/bundles/jquery", "~/bundles/jqueryui")
        @Styles.Render("~/Content/themes/base/css")
    }

    @Styles.Render("~/Content/bootstrap")
    @RenderSection("Styles", required: false)
</head>
<body>
    <div class="navbar navbar-inverse navbar-fixed-bottom" id ="bar">
        <div class="navbar-inner">
            <div class="container">
                <a class="btn btn-inverse btn-navbar" data-toggle="collapse" data-target=".nav-collapse" href="#">
                    <i class="icon-align-justify icon-white"></i>
                </a>
                <a class="brand" href="@Url.Action("Index", "Home")">UNL Research</a>

                @if (Request.IsAuthenticated)
                {
@* User is logged in *@
                    <div class="nav-collapse collapse">
                        <ul class="nav">
                            @{
                    string[] roles = Roles.GetRolesForUser();
                    var links = from item in menus
                                where item.Roles.Split(new String[] { "," }, StringSplitOptions.RemoveEmptyEntries).Any(x => roles.Contains(x) || x == "All")
                                select item;
                    foreach (var link in links)
                    {
                                @:<li class="">@Html.ActionLink(link.LinkText, link.ActionName, link.ControllerName)</li>
                                }

                    using (var context = new HackerCentralContext(null))
                    {
                        if (context.UserProfiles.Find(WebSecurity.CurrentUserId).AuthProvider == AuthProvider.Local)
                        {
                                @:<li class="">@Html.ActionLink("Change Password", "Manage", "Account")</li>
                                    }
                    }
                            }
                        </ul>
                    </div>
                    
                                
@*//this is old
                    <div class="nav-collapse collapse">
                        <ul class="nav">
                            <li class="">@Html.ActionLink("Home", "Index", "Home")</li>
                            <li class="">@Html.ActionLink("Edit Points", "Index", "Points")</li>
                            <li class="">@Html.ActionLink("View Users", "Index", "Users")</li>
                        </ul>
                    </div>*@
                        
                    <div class="nav-collapse collapse pull-right">
                        @*//There is need to access profile and dashboard since they are supported by authenabridge
                        <div class="btn-group dropup">
                            <a class="btn dropdown-toggle" data-toggle="dropdown" href="#">Welcome, @User.Identity.Name <span class="caret"></span></a>
                            <ul class="dropdown-menu">
                                <li>@Html.ActionLink("Profile", "Manage", "Account")</li>
                                <li>@Html.ActionLink("Dashboard", "Dashboard", "Home")</li>
                            </ul>
                        </div>*@

                        <ul class="nav pull-right">
                            <li class="">
                                <p class="navbar-text">Hi, @User.Identity.Name</p>
                            </li>
                            <li class="">
                                @* the chat box is rendered for all users *@
                                <div id="msgDropDown" class="pull-right dropdown">
                                    <a id="msgNavButton" class="btn btn-inverse dropdown-toggle" data-toggle="dropdown" href="#" style="margin-left: 20px;">
                                        <i class="icon-comment icon-white"></i>
                                    </a>
                                    <div id="chatWindow" class="dropdown-menu pull-left" style="padding: 5px; padding-bottom: 10px; max-width: 500px; width: 380px;min-height:480px; resize:vertical; right:-175px" >
                                       <div class="pull-right" style= "position:absolute;right:5px; ">
                                          @* <i class="icon-move" id="dragHandle"></i>*@
                                           <i class="icon-remove"  data-toggle="dropdown"></i>                                    
                                       </div>
                                         <div>                                      
                                            <div id="msgTabContent" class="tab-content">
                                                <ul id="msgTabs" class="nav nav-pills" style="float:none">                                                  
                                                    <li><a href="#startNewChatContent" title="Creat a new chat" data-toggle="tab" style = "background-color: #FFFFFF"><b style ="color: #363636">+</b></a></li>
                                                </ul>
                                                @*<div style="min-height: 50px">
                                                </div>*@
                                                <div class="tab-pane active" id="startNewChatContent">
                                                    <div class="content">
                                                        <form id="msgForm">
                                                            <div class="controls">
                                                                <input id="msgRecipients" type="hidden" style="width: 355px; max-width: 400px;" />
                                                            </div>
                                                            <div style="min-height: 10px"></div>
                                                            <div class="controls">
                                                                <textarea id="msgText"  placeholder="Message"  rows="2" style="width: 340px; max-width: 340px; resize: none;"></textarea>
                                                            </div>
                                                            <div class="controls">
                                                                <button type="submit" class="btn">Send</button>
                                                            </div>
                                                            <div>
                                                                <img src="http://janetfouts.com/wp-content/uploads/2011/08/Fotolia_30732541_XS.jpg" />
                                                            </div>
                                                        </form>
                                                        @*<div id="msgBoard" style="height: 200px; overflow-y: auto;"></div>*@
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </li>
                            <li class=""><a href="javascript:$.connection.hub.stop();document.getElementById('logoutForm').submit()">Logout</a></li>
                        </ul>

                        @using (Html.BeginForm("LogOff", "Account", FormMethod.Post, new { id = "logoutForm" }))
                        {
                            @Html.AntiForgeryToken()
                            
                        }
                    </div>
                }
                else
                {
@* User is not logged in *@
                    <div class="nav-collapse collapse">
                        <ul class="nav">
                            @{
                    var links = from item in menus
                                where item.Roles.Split(new String[] { "," }, StringSplitOptions.RemoveEmptyEntries).Any(x => new String[] { "All", "Anonymous" }.Contains(x))
                                select item;
                    foreach (var link in links)
                    {    
                                @:<li>@Html.ActionLink(link.LinkText, link.ActionName, link.ControllerName)</li>
                                }
                            }
                            <li><a href="http://cse.unl.edu/~lksoh/Classes/RAIK183H_Fall13/IDEASPERE_UserManual.pdf">User Manual</a></li>
                        </ul>
                    </div>
                    
@*
                    // logout is dependent on external authentication service
                    <div class="nav-collapse collapse pull-right">
                        <ul class="nav">
                            <li class="">@Html.ActionLink("Login", "Login", "Account")</li>
                            <li class="">@Html.ActionLink("Sign Up", "Register", "Account")</li>
                        </ul>
                    </div>
                    *@
                }
            </div>
        </div>
    </div>


    @RenderBody()


    @*<div id="fb-root"></div>
    <script src="@Url.Content("~/Scripts/facebook.js")" type="text/javascript"></script>
    <script type="text/javascript">
        $(function () {
            InitializeFacebook(@System.Configuration.ConfigurationManager.AppSettings["FacebookAppId"]);
        });
    </script>*@

    @RenderSection("Scripts", required: false)
</body>
</html>